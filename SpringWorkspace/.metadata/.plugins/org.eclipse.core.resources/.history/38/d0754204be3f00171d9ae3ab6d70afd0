package es.polaflix.restcontrollers;

import java.util.Calendar;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import es.polaflix.domain.*;
import es.polaflix.repositories.SeriesRepository;
import es.polaflix.repositories.UsersRepository;

@RestController
public class UsuariosController {

	@Autowired
	UsersRepository ur;
	@Autowired
	SeriesRepository sr;
	
	@RequestMapping(value = "/usuarios", method = RequestMethod.GET)
	public List<Usuario> usuarios(){
		return ur.findAll();
	}
	
	@RequestMapping(value = "usuarios/{usuario}", method = RequestMethod.GET)
	public ResponseEntity<Usuario> getUsuario(@PathVariable(value="usuario") String usuario){
		Usuario u = ur.findByAlias(usuario);
		if(u == null){
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Usuario>(u,HttpStatus.OK);
	}
	
	@RequestMapping(value = "usuarios/{usuario}/empezadas", method = RequestMethod.GET)
	public ResponseEntity<Set<SerieEmpezada>> getSeriesEmpezadas(@PathVariable(value="usuario") String usuario){
		Usuario u = ur.findByAlias(usuario);
		if(u == null){
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Set<SerieEmpezada>>(u.getSeriesEmpezadas(),HttpStatus.OK);
	}
	
	@RequestMapping(value = "usuarios/{usuario}/pendientes", method = RequestMethod.GET)
	public ResponseEntity<Set<Serie>> getSeriesPendientes(@PathVariable(value="usuario") String usuario){
		Usuario u = ur.findByAlias(usuario);
		if(u == null){
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Set<Serie>>(u.getSeriesPendientes(),HttpStatus.OK);
	}
	
	@RequestMapping(value = "usuarios/{usuario}/terminadas", method = RequestMethod.GET)
	public ResponseEntity<Set<Serie>> getSeriesTerminadas(@PathVariable(value="usuario") String usuario){
		Usuario u = ur.findByAlias(usuario);
		if(u == null){
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Set<Serie>>(u.getSeriesTerminadas(),HttpStatus.OK);
	}
	
	@RequestMapping(value = "usuarios/{usuario}/capitulosVistos", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Boolean> anadeVisualizacion(@PathVariable(value="usuario") String usuario, @RequestParam(value="serie") int serie, @RequestParam(value="temp") int temp, @RequestParam(value="cap") int cap){
		Usuario u = ur.findByAlias(usuario);
		Serie s = sr.findById(serie);
		Capitulo capi = null;
		if(u == null || s == null){
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		for(Temporada t: s.getTemporadas()){
			if(t.getNumTemp()==temp){
				for(Capitulo c: t.getCapitulos()){
					if(c.getNumCap()==cap){
						capi = c;
						break;
					}
				}
			}
		}
		if(capi == null){
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		
		Calendar now = Calendar.getInstance();
		int dia = now.getActualMaximum(Calendar.DAY_OF_MONTH);
		int mes = now.getActualMaximum(Calendar.MONTH);
		int anyo = now.getActualMaximum(Calendar.YEAR);
		CapituloFactura cf = new CapituloFactura();
		cf.setAnyo(anyo);
		cf.setMes(mes);
		cf.setDia(dia);
		cf.setPrecio(s.getTipo().getPrecioCap());
		cf.setCapitulo(capi);
		cf.setSerie(s);
		sr.save(cf);
		
		u.anadeCapVisto(cf);
		ur.save(u);
		return new ResponseEntity<Boolean>(true,HttpStatus.OK);
	}
}
